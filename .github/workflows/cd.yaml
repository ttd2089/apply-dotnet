name: Continuous Delivery
on:
  push:
    branches: [main]
permissions:
  contents: write
jobs:
  cd:
    name: Continuous Delivery
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
        include-prerelease: false

    - name: Get Version
      id: version
      run: echo "version=$(grep -Po -e '(?<=<Version>)[^<]+' Ttd2089.Apply/Ttd2089.Apply.csproj)" >> ${GITHUB_OUTPUT}

    - name: Create Prerelease
      id: release
      env:
        VERSION: ${{ steps.version.outputs.version }}
      run: |-
        resp=$(curl -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${GITHUB_TOKEN}" \
          ${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/releases \
          -d '{
                "tag_name": "'${VERSION}'",
                "target_commitish": "'${GITHUB_SHA}'",
                "name": "'${VERSION}'",
                "prerelease": true
              }')
        id=$(echo ${resp} | jq)
        if ! [ "${id}" = "null" ]; then
          echo "Releasing ${VERSION}"
          echo "release=${id}" >> ${GITHUB_OUTPUT}
          exit 0
        fi
        error_code=$(echo ${resp} | jq -r '.errors[0].code')
        if [ "$error_code" = "already_exists" ]; then
          echo "Already released ${VERSION}"
          exit 0
        fi
        echo 'Unexpected response when creating release:' >> ${GITHUB_STEP_SUMMARY}
        echo '```json' >> ${GITHUB_STEP_SUMMARY}
        echo $resp | jq >> ${GITHUB_STEP_SUMMARY}
        echo '```' >> ${GITHUB_STEP_SUMMARY}
        exit 1

    - name: Test
      if: steps.release.outputs.release
      run: dotnet test

    - name: Pack
      if: steps.release.outputs.release
      run: dotnet pack -c Release -o ./pack

    - name: Publish
      if: steps.release.outputs.release
      env:
        NUGET_SOURCE: https://api.nuget.org/v3/index.json
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      run: dotnet nuget push --source ${NUGET_SOURCE} --api-key ${NUGET_API_KEY} ./pack/*

    - name: Finalize Release
      env:
        VERISON: ${{ steps.version.outputs.version }}
        RELEASE: ${{ steps.release.outputs.release }}
      run: |-
        curl -X PATCH \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${GITHUB_TOKEN}" \
          ${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/releases/${RELEASE} \
          -d '{
                "tag_name": "'${VERSION}'",
                "target_commitish": "'${GITHUB_SHA}'",
                "name": "'${VERSION}'",
                "prerelease": false
              }'
